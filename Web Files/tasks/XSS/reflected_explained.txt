--- Level One ---
In this scenario, the vulnerability lies in the handling of user input retrieved from the "name" parameter in the URL, accessed through $_GET['name']. The input is directly echoed back to the page without undergoing any sanitization or encoding processes.

To exploit this vulnerability and launch an XSS attack, an attacker can manipulate the "name" parameter by injecting HTML or JavaScript code. Here's an example:

http://example.com/xss.php?name=<script>alert('XSS Attack!');</script>

When the above URL is accessed, the JavaScript code <script>alert('XSS Attack!');</script> is executed, triggering the display of an alert dialog.

--- Level Two ---
Payload: **[XSS](javascript:alert('XSS'))**

Explanation:

**[XSS] is Markdown syntax for creating bold text.
(javascript:alert('XSS')) is the injected part. Here's how it works:

javascript: is a pseudo-protocol that allows us to execute JavaScript code.
alert('XSS') is the JavaScript code that triggers an alert box with the message 'XSS'.
The trick is that the Showdown library doesn't consider the Markdown syntax when converting the payload to HTML, allowing our JavaScript code to execute.

The Showdown library, which is responsible for converting Markdown text to HTML, plays a crucial role in this vulnerability. Typically, when converting Markdown to HTML, the library focuses on interpreting and rendering the Markdown syntax correctly, without considering any potential security implications.
In the case of this challenge, the vulnerability arises because the Showdown library fails to properly handle the Markdown syntax in the payload. Instead of treating the injected JavaScript code as part of the Markdown text, it simply passes it through without any interpretation or validation.
As a result, the JavaScript code within the payload remains intact and is executed by the browser when the HTML output is rendered. This means that the payload effectively bypasses the Markdown escaping mechanism and triggers the desired alert functionality.
In essence, the vulnerability stems from the discrepancy between the intended behavior of the Showdown library, which is to convert Markdown to HTML, and the actual behavior in this specific scenario, where it fails to consider the potential security risks associated with unescaped JavaScript code within the Markdown.

